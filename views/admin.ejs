<%- include('./partials/header') %>

<main class="flex-1 py-8 sm:py-12 bg-gray-50">
    <div class="container mx-auto px-4 sm:px-6 lg:px-20">
        <h2 class="text-xl sm:text-2xl font-bold tracking-tight text-gray-800 mb-6 sm:mb-8">Manage Products</h2>
        <!-- Products Table -->
        <div class="bg-white rounded-xl shadow-md overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Discount</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    <% products.forEach(product => { %>
                        <tr>
                            <td class="px-4 py-4 whitespace-nowrap">
                                <img src="data:image/jpeg;base64,<%= product.image.toString('base64') %>" alt="<%= product.name %>" class="w-12 h-12 object-contain">
                            </td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-800"><%= product.name %></td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-800">₹ <%= product.price %></td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-800"><%= Math.round((product.discount / product.price) * 100) %>%</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm">
                                <button class="edit-btn text-blue-600 hover:text-blue-800 mr-3" data-id="<%= product._id %>">Edit</button>
                                <button class="delete-btn text-red-600 hover:text-red-800" data-id="<%= product._id %>">Delete</button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
</main>

<!-- Edit Product Modal -->
<div id="editProductModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg overflow-hidden w-11/12 max-w-md relative p-6">
        <button id="close-edit-modal" class="absolute top-2 right-2 text-gray-600 hover:text-gray-900">×</button>
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Edit Product</h3>
        <form id="editProductForm" enctype="multipart/form-data">
            <input type="hidden" id="editProductId" name="productId">
            <div class="mb-4">
                <label for="editName" class="block text-sm font-medium text-gray-700">Name</label>
                <input type="text" id="editName" name="name" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="mb-4">
                <label for="editPrice" class="block text-sm font-medium text-gray-700">Price</label>
                <input type="number" id="editPrice" name="price" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="mb-4">
                <label for="editDiscount" class="block text-sm font-medium text-gray-700">Discount (%)</label>
                <input type="number" id="editDiscount" name="discount" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>
            <div class="mb-4">
                <label for="editImage" class="block text-sm font-medium text-gray-700">Image (optional)</label>
                <input type="file" id="editImage" name="image" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" accept="image/*">
            </div>
            <div class="mb-4">
                <label for="editBgColor" class="block text-sm font-medium text-gray-700">Background Color</label>
                <input type="text" id="editBgColor" name="bgcolor" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="#ffffff">
            </div>
            <div class="mb-4">
                <label for="editPanelColor" class="block text-sm font-medium text-gray-700">Panel Color</label>
                <input type="text" id="editPanelColor" name="panelcolor" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="#ffffff">
            </div>
            <div class="mb-4">
                <label for="editTextColor" class="block text-sm font-medium text-gray-700">Text Color</label>
                <input type="text" id="editTextColor" name="textcolor" class="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="#000000">
            </div>
            <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition duration-150 ease-in-out">Update Product</button>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const editButtons = document.querySelectorAll('.edit-btn');
        const deleteButtons = document.querySelectorAll('.delete-btn');
        const editModal = document.getElementById('editProductModal');
        const closeEditModalBtn = document.getElementById('close-edit-modal');
        const editForm = document.getElementById('editProductForm');
        const editProductId = document.getElementById('editProductId');
        const editName = document.getElementById('editName');
        const editPrice = document.getElementById('editPrice');
        const editDiscount = document.getElementById('editDiscount');
        const editBgColor = document.getElementById('editBgColor');
        const editPanelColor = document.getElementById('editPanelColor');
        const editTextColor = document.getElementById('editTextColor');

        // Edit Button Functionality
        editButtons.forEach(button => {
            button.addEventListener('click', async function() {
                const productId = this.getAttribute('data-id');
                console.log('Fetching product details for ID:', productId);
                try {
                    const response = await fetch(`/admin/edit/${productId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const product = await response.json();
                    if (product.error) {
                        console.error('Server error:', product.error);
                        alert(`Failed to load product: ${product.error}`);
                        return;
                    }
                    console.log('Product data:', product);
                    // Populate the form with product details
                    editProductId.value = product._id;
                    editName.value = product.name;
                    editPrice.value = product.price;
                    // Calculate discount percentage from the stored discount amount
                    const discountPercentage = Math.round((product.discount / product.price) * 100);
                    editDiscount.value = discountPercentage;
                    editBgColor.value = product.bgcolor;
                    editPanelColor.value = product.panelcolor;
                    editTextColor.value = product.textcolor;
                    editModal.classList.remove('hidden');
                } catch (err) {
                    console.error('Error fetching product details:', err.message);
                    alert(`Failed to load product: ${err.message}`);
                }
            });
        });

        // Close Edit Modal
        closeEditModalBtn.addEventListener('click', function() {
            editModal.classList.add('hidden');
        });

        // Close modal when clicking outside
        editModal.addEventListener('click', function(event) {
            if (event.target === editModal) {
                editModal.classList.add('hidden');
            }
        });

        // Submit Edit Form
        editForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            const productId = editProductId.value;
            console.log('Submitting update for product ID:', productId);
            console.log('Form data:', [...formData.entries()]); // Log form data for debugging
            try {
                const response = await fetch(`/admin/edit/${productId}`, {
                    method: 'POST',
                    body: formData
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const result = await response.json();
                if (result.success) {
                    alert('Product updated successfully');
                    editModal.classList.add('hidden');
                    location.reload(); // Refresh the page to reflect changes
                } else {
                    console.error('Server error:', result.error);
                    alert(`Failed to update product: ${result.error || 'Unknown error'}`);
                }
            } catch (err) {
                console.error('Error updating product:', err.message);
                alert(`Failed to update product: ${err.message}`);
            }
        });

        // Delete Button Functionality
        deleteButtons.forEach(button => {
            button.addEventListener('click', async function() {
                const productId = this.getAttribute('data-id');
                if (confirm('Are you sure you want to delete this product?')) {
                    try {
                        const response = await fetch(`/admin/delete/${productId}`, {
                            method: 'DELETE'
                        });
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        const result = await response.json();
                        if (result.success) {
                            alert('Product deleted successfully');
                            location.reload(); // Refresh the page to reflect changes
                        } else {
                            console.error('Server error:', result.error);
                            alert(`Failed to delete product: ${result.error || 'Unknown error'}`);
                        }
                    } catch (err) {
                        console.error('Error deleting product:', err.message);
                        alert(`Failed to delete product: ${err.message}`);
                    }
                }
            });
        });
    });
</script>

<%- include('./partials/footer') %>