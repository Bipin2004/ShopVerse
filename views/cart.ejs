<%- include('./partials/header') %>
<div class="w-full h-screen flex items-start px-20 py-20 gap-10">
    <div class="w-[30%]">
        <% user.cart.forEach((item, index)=>{ %>
            <div class="mb-5 rounded-md overflow-hidden cart-item" data-id="<%= item._id %>">
                <div class="w-full justify-center items-center h-80 bg-[<%= item.bgcolor %>]">
                    <img class="h-[18rem]" src="data:image/jpeg;base64,<%= item.image.toString('base64') %>" alt="">
                </div>
                <div class="w-full flex justify-between px-5 py-4 bg-[<%= item.panelcolor %>]">
                    <h3 class="text-2xl"><%= item.name %></h3>
                    <div class="flex items-center gap-2">
                        <i class="w-7 h-7 bg-white flex rounded-full items-center justify-center ri-subtract-line minus-btn cursor-pointer"></i>
                        <div class="px-2 py-1 rounded-md bg-white text-black quantity-display" data-price="<%= Number(item.price) - Number(item.discount) %>">01</div>
                        <i class="w-7 h-7 bg-white flex rounded-full items-center justify-center ri-add-line plus-btn cursor-pointer"></i>
                    </div>
                </div>
                <div class="flex text-white items-center justify-between px-5 py-3 bg-[<%= item.textcolor %>]">
                    <h4 class="text-lg">Item Price</h4>
                    <h2 class="text-lg item-price">₹ <%= Number(item.price) - Number(item.discount) %></h2>
                </div>
            </div>
        <% })%>
    </div>
    <div class="w-[70%]">
        <h3 class="text-xl">Price Breakdown</h3>
        <div class="px-10 mt-5">
            <% let totalMRP = 0; let totalDiscount = 0; %>
            <% user.cart.forEach((item) => { %>
                <% totalMRP += Number(item.price); %>
                <% totalDiscount += Number(item.discount); %>
            <% }); %>
            <div class="flex mt-2">
                <h4 class="w-1/3">Total MRP</h4>
                <h4 id="total-mrp">₹ <%= totalMRP %></h4>
            </div>
            <div class="flex mt-2">
                <h4 class="w-1/3">Discount on MRP</h4>
                <h4 id="total-discount">₹ <%= totalDiscount %></h4>
            </div>
            <div class="flex mt-2">
                <h4 class="w-1/3">Platform Fee</h4>
                <h4>₹ 20</h4>
            </div>
            <div class="flex mt-2">
                <h4 class="w-1/3">Shipping Fee</h4>
                <h4>FREE</h4>
            </div>
        </div>
        <div class="w-full h-[1px] bg-black mt-10"></div>
        <div class="flex mt-5">
            <h3 class="w-1/3 text-xl">Total Amount</h3>
            <h3 class="font-semibold text-xl text-green-600" id="total-amount">₹ <%= bill %></h3>
        </div>
        <form action=""></form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get all plus and minus buttons
        const plusButtons = document.querySelectorAll('.plus-btn');
        const minusButtons = document.querySelectorAll('.minus-btn');
        
        // Add event listeners to plus buttons
        plusButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                const cartItem = this.closest('.cart-item');
                const quantityDisplay = cartItem.querySelector('.quantity-display');
                const itemPrice = cartItem.querySelector('.item-price');
                const productId = cartItem.dataset.id;
                
                // Get the current quantity and increment it
                let quantity = parseInt(quantityDisplay.textContent);
                quantity += 1;
                
                // Update the display
                quantityDisplay.textContent = quantity.toString().padStart(2, '0');
                
                // Update the price
                const unitPrice = parseFloat(quantityDisplay.dataset.price);
                itemPrice.textContent = `₹ ${(unitPrice * quantity).toFixed(2)}`;
                
                // Update the server-side cart
                updateCartQuantity(productId, quantity);
                
                // Update totals
                updateTotals();
            });
        });
        
        // Add event listeners to minus buttons
        minusButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                const cartItem = this.closest('.cart-item');
                const quantityDisplay = cartItem.querySelector('.quantity-display');
                const itemPrice = cartItem.querySelector('.item-price');
                const productId = cartItem.dataset.id;
                
                // Get the current quantity and decrement it
                let quantity = parseInt(quantityDisplay.textContent);
                if (quantity > 1) {
                    quantity -= 1;
                    
                    // Update the display
                    quantityDisplay.textContent = quantity.toString().padStart(2, '0');
                    
                    // Update the price
                    const unitPrice = parseFloat(quantityDisplay.dataset.price);
                    itemPrice.textContent = `₹ ${(unitPrice * quantity).toFixed(2)}`;
                    
                    // Update the server-side cart
                    updateCartQuantity(productId, quantity);
                    
                    // Update totals
                    updateTotals();
                } else {
                    // Remove item from cart when quantity becomes 0
                    removeFromCart(productId, cartItem);
                }
            });
        });
        
        // Function to update cart quantity via API
        function updateCartQuantity(productId, quantity) {
            fetch(`/update-cart-quantity/${productId}/${quantity}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Cart updated:', data);
            })
            .catch(error => {
                console.error('Error updating cart:', error);
            });
        }
        
        // Function to remove item from cart
        function removeFromCart(productId, cartItemElement) {
            fetch(`/remove-from-cart/${productId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the item from the DOM
                    cartItemElement.remove();
                    
                    // Update totals
                    updateTotals();
                    
                    // If the cart is empty, reload the page to show empty cart message
                    if (document.querySelectorAll('.cart-item').length === 0) {
                        location.reload();
                    }
                }
            })
            .catch(error => {
                console.error('Error removing item from cart:', error);
            });
        }
        
        // Function to recalculate totals based on current quantities and prices
        function updateTotals() {
            const cartItems = document.querySelectorAll('.cart-item');
            let totalAmount = 20; // Start with the platform fee
            let totalMRP = 0;
            let totalDiscount = 0;
            
            cartItems.forEach(item => {
                const quantityDisplay = item.querySelector('.quantity-display');
                const quantity = parseInt(quantityDisplay.textContent);
                const unitPrice = parseFloat(quantityDisplay.dataset.price);
                
                // Add to the total amount
                totalAmount += unitPrice * quantity;
            });
            
            // Update the displayed total
            document.getElementById('total-amount').textContent = `₹ ${totalAmount.toFixed(2)}`;
        }
    });
</script>

<%- include('./partials/footer') %>